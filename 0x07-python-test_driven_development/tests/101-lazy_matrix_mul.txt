The ``101-lazy_matrix_mul`` module
==================================

Using ``lazy_matrix_mul``
-------------------------

import the module:
	>>> module = __import__("101-lazy_matrix_mul")

check the module docstring:
	>>> len(module.__doc__) > 1
	True

import the function ``lazy_matrix_mul``:
	>>> lazy_matrix_mul = module.lazy_matrix_mul

check the function docstring:
	>>> len(lazy_matrix_mul.__doc__) > 1
	True


check for types:
	>>> matrix_a = 12
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: Scalar operands are not allowed, use '*' instead

	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> matrix_b = 12
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: Scalar operands are not allowed, use '*' instead

	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     "hello"
	... ]
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: setting an array element with a sequence

	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	... ]
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9],
	...     "hello"
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: setting an array element with a sequence

	>>> matrix_a = []
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: shapes (0,) and (3,3) not aligned: 0 (dim 0) != 3 (dim 0)

	>>> matrix_a = [[]]
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: shapes (1,0) and (3,3) not aligned: 0 (dim 1) != 3 (dim 0)

	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> matrix_b = []
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: shapes (3,3) and (0,) not aligned: 3 (dim 1) != 0 (dim 0)

	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> matrix_b = [[]]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: shapes (3,3) and (1,0) not aligned: 3 (dim 1) != 1 (dim 0)

	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     ['7', '8', '9']
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	TypeError: invalid data type for einsum

	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     ['7', '8', '9']
	... ]
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	TypeError: invalid data type for einsum

	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8]
	... ]
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: setting an array element with a sequence.

	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: setting an array element with a sequence.

	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: shapes (3,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)

	>>> matrix_a = [
	...     [1, 2],
	...     [3, 4],
	...     [5, 6]
	... ]
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	Traceback (most recent call last):
	...
	ValueError: shapes (3,2) and (3,3) not aligned: 2 (dim 1) != 3 (dim 0)


Test for correct outputs
	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	array([[ 30,  36,  42],
	       [ 66,  81,  96],
	       [102, 126, 150]])

	>>> matrix_a = [
	...     [1, 2, 3],
	...     [4, 5, 6],
	...     [7, 8, 9]
	... ]
	>>> matrix_b = [
	...     [1, 2],
	...     [3, 4],
	...     [5, 6]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	array([[ 22,  28],
	       [ 49,  64],
	       [ 76, 100]])

	>>> matrix_a = [
	...     [1, 2],
	...     [3, 4],
	...     [5, 6]
	... ]
	>>> matrix_b = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> lazy_matrix_mul(matrix_a, matrix_b)
	array([[ 9, 12, 15],
	       [19, 26, 33],
	       [29, 40, 51]])
